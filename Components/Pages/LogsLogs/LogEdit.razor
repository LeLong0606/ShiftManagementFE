@page "/logs/add"
@using ShiftManagementFE.DTOs
@using ShiftManagementFE.Services
@inject LogService LogService
@inject NavigationManager Navigation

<h3>Tạo nhật ký (Log) mới</h3>

@if (!string.IsNullOrEmpty(ErrorMsg))
{
    <div class="alert alert-danger">@ErrorMsg</div>
}

<EditForm Model="Model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">UserID</label>
        <InputNumber class="form-control" @bind-Value="Model.UserID" />
    </div>
    <div class="mb-3">
        <label class="form-label">Hành động</label>
        <InputText class="form-control" @bind-Value="Model.Action" />
    </div>
    <div class="mb-3">
        <label class="form-label">Mô tả</label>
        <InputTextArea class="form-control" @bind-Value="Model.Description" />
    </div>
    <div class="mb-3">
        <label class="form-label">Thời gian</label>
        <InputDate class="form-control" @bind-Value="Model.Timestamp" />
    </div>
    <button class="btn btn-primary" type="submit">Lưu</button>
    <button class="btn btn-secondary" type="button" @onclick="OnCancel">Hủy</button>
</EditForm>

@code {
    LogCreateDto Model { get; set; } = new();
    string? ErrorMsg;

    private async Task OnValidSubmit()
    {
        ErrorMsg = null;
        try
        {
            var result = await LogService.CreateLogAsync(Model);
            if (result.IsSuccess)
            {
                Navigation.NavigateTo("/logs");
            }
            else
            {
                ErrorMsg = "Có lỗi xảy ra khi tạo log. Vui lòng kiểm tra lại thông tin hoặc thử lại sau.";
            }
        }
        catch
        {
            ErrorMsg = "Có lỗi hệ thống. Vui lòng thử lại sau!";
        }
    }

    private void OnCancel()
    {
        Navigation.NavigateTo("/logs");
    }
}