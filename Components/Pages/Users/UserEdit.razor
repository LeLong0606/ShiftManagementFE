@page "/users/add"
@page "/users/edit/{Id:int}"
@using ShiftManagementFE.DTOs
@using ShiftManagementFE.Services
@inject UserService UserService
@inject NavigationManager Navigation

<h3>@(Id == null ? "Thêm người dùng" : "Cập nhật người dùng")</h3>

<EditForm Model="user" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Tên đăng nhập</label>
        <InputText class="form-control" @bind-Value="user.Username" disabled="@isEdit" />
    </div>

    @if (!isEdit)
    {
        <div class="mb-3">
            <label class="form-label">Mật khẩu</label>
            <InputText class="form-control" type="password" @bind-Value="user.Password" />
        </div>
    }

    <div class="mb-3">
        <label class="form-label">Họ tên</label>
        <InputText class="form-control" @bind-Value="user.FullName" />
    </div>

    <div class="mb-3">
        <label class="form-label">Email</label>
        <InputText class="form-control" @bind-Value="user.Email" />
    </div>

    <div class="mb-3">
        <label class="form-label">Điện thoại</label>
        <InputText class="form-control" @bind-Value="user.PhoneNumber" />
    </div>

    <div class="mb-3">
        <label class="form-label">Phòng ban</label>
        <InputNumber class="form-control" @bind-Value="user.DepartmentID" />
    </div>

    <div class="mb-3">
        <label class="form-label">Cửa hàng</label>
        <InputNumber class="form-control" @bind-Value="user.StoreID" />
    </div>

    @if (isEdit)
    {
        <div class="mb-3">
            <label class="form-label">Trạng thái</label>
            <div class="form-check">
                <InputCheckbox class="form-check-input" @bind-Value="userUpdate.Status" />
                <label class="form-check-label">Hoạt động</label>
            </div>
        </div>
    }

    <button class="btn btn-primary" type="submit">Lưu</button>
    <button class="btn btn-secondary" type="button" @onclick="NavigateBack">Hủy</button>
</EditForm>

@code {
    [Parameter] public int? Id { get; set; }

    bool isEdit => Id != null;
    UserCreateDto user = new();
    UserUpdateDto userUpdate = new();

    protected override async Task OnInitializedAsync()
    {
        if (isEdit)
        {
            var existing = await UserService.GetUserAsync(Id.Value);
            if (existing != null)
            {
                user = new UserCreateDto
                {
                    Username = existing.Username,
                    FullName = existing.FullName,
                    Email = existing.Email,
                    PhoneNumber = existing.PhoneNumber,
                    DepartmentID = existing.DepartmentID,
                    StoreID = existing.StoreID,
                };
                userUpdate = new UserUpdateDto
                {
                    FullName = existing.FullName,
                    Email = existing.Email,
                    PhoneNumber = existing.PhoneNumber,
                    DepartmentID = existing.DepartmentID,
                    StoreID = existing.StoreID,
                    Status = existing.Status
                };
            }
        }
    }

    async Task HandleValidSubmit()
    {
        ApiResult result;

        if (!isEdit)
        {
            result = await UserService.CreateUserAsync(user);
        }
        else
        {
            result = await UserService.UpdateUserAsync(Id!.Value, userUpdate);
        }

        if (result.IsSuccess)
        {
            NavigateBack();
        }
        else
        {
            // Hiển thị lỗi nếu cần
        }
    }

    void NavigateBack()
    {
        Navigation.NavigateTo("/users");
    }
}
