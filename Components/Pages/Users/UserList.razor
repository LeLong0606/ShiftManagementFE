@page "/users"
@using ShiftManagementFE.DTOs
@using ShiftManagementFE.Services
@inject UserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Danh sách người dùng</h3>

<button class="btn btn-primary mb-2" @onclick="GoToAdd">Thêm mới</button>

@if (users == null)
{
    <p>Đang tải...</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>ID</th>
                <th>Tên đăng nhập</th>
                <th>Họ tên</th>
                <th>Email</th>
                <th>Điện thoại</th>
                <th>Phòng ban</th>
                <th>Cửa hàng</th>
                <th>Trạng thái</th>
                <th>Ngày tạo</th>
                <th>Ngày cập nhật</th>
                <th>Thao tác</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.UserID</td>
                    <td>@user.Username</td>
                    <td>@user.FullName</td>
                    <td>@user.Email</td>
                    <td>@user.PhoneNumber</td>
                    <td>@user.DepartmentName</td>
                    <td>@user.StoreName</td>
                    <td>@(user.Status ? "Hoạt động" : "Khóa")</td>
                    <td>@user.CreatedAt.ToString("yyyy-MM-dd")</td>
                    <td>@user.UpdatedAt.ToString("yyyy-MM-dd")</td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => GoToEdit(user.UserID)">Sửa</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => Delete(user.UserID)">Xóa</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<UserDto>? users;

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetUsersAsync();
    }

    void GoToAdd()
    {
        Navigation.NavigateTo("/users/add");
    }

    void GoToEdit(int id)
    {
        Navigation.NavigateTo($"/users/edit/{id}");
    }

    async Task Delete(int id)
    {
        if (await JS.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa user {id}?"))
        {
            var result = await UserService.DeleteUserAsync(id);
            if (result.IsSuccess)
            {
                users = await UserService.GetUsersAsync();
                await JS.InvokeVoidAsync("alert", "Xóa thành công!");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Lỗi: " + result.Error);
            }
        }
    }
}