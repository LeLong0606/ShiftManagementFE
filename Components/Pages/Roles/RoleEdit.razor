@page "/roles/add"
@page "/roles/edit/{Id:int}"
@using ShiftManagementFE.DTOs
@using ShiftManagementFE.Services
@inject RoleService RoleService
@inject NavigationManager Navigation

<h3>@(IsEdit ? "Cập nhật vai trò" : "Thêm vai trò")</h3>

<EditForm Model="Model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Tên vai trò</label>
        <InputText class="form-control" @bind-Value="Model.RoleName" />
    </div>
    <button class="btn btn-primary" type="submit">Lưu</button>
    <button class="btn btn-secondary" type="button" @onclick="OnCancel">Hủy</button>
</EditForm>

@code {
    [Parameter] public int? Id { get; set; }
    public bool IsEdit => Id != null;

    // Dùng đúng DTO
    public RoleDto Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (IsEdit)
        {
            var d = await RoleService.GetRoleAsync(Id.Value);
            if (d != null)
            {
                Model = d;
            }
        }
        else
        {
            Model = new RoleDto();
        }
    }

    private async Task OnValidSubmit()
    {
        ApiResult result;
        if (!IsEdit)
        {
            var res = await RoleService.CreateRoleAsync(Model);
            result = new ApiResult(res.IsSuccess, res.Error);
        }
        else
        {
            result = await RoleService.UpdateRoleAsync(Id!.Value, Model);
        }

        if (result.IsSuccess)
        {
            Navigation.NavigateTo("/roles");
        }
        else
        {
            // TODO: Hiển thị lỗi nếu cần
        }
    }

    private void OnCancel()
    {
        Navigation.NavigateTo("/roles");
    }
}