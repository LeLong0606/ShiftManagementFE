@page "/holidays/add"
@page "/holidays/edit/{Id:int}"
@using ShiftManagementFE.DTOs
@using ShiftManagementFE.Services
@inject HolidayService HolidayService
@inject NavigationManager Navigation

<h3>@(IsEdit ? "Cập nhật ngày lễ" : "Thêm ngày lễ")</h3>

@if (IsEdit)
{
    <EditForm Model="ModelUpdate" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Ngày</label>
            <InputDate class="form-control" @bind-Value="ModelUpdate.Date" />
        </div>
        <div class="mb-3">
            <label class="form-label">Mã ca mặc định (ID)</label>
            <InputNumber class="form-control" @bind-Value="ModelUpdate.DefaultShiftCodeID" />
        </div>
        <button class="btn btn-primary" type="submit">Lưu</button>
        <button class="btn btn-secondary" type="button" @onclick="OnCancel">Hủy</button>
    </EditForm>
}
else
{
    <EditForm Model="ModelCreate" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Ngày</label>
            <InputDate class="form-control" @bind-Value="ModelCreate.Date" />
        </div>
        <div class="mb-3">
            <label class="form-label">Mã ca mặc định (ID)</label>
            <InputNumber class="form-control" @bind-Value="ModelCreate.DefaultShiftCodeID" />
        </div>
        <button class="btn btn-primary" type="submit">Lưu</button>
        <button class="btn btn-secondary" type="button" @onclick="OnCancel">Hủy</button>
    </EditForm>
}

@code {
    [Parameter] public int? Id { get; set; }
    public bool IsEdit => Id != null;

    public HolidayCreateDto ModelCreate { get; set; } = new();
    public HolidayUpdateDto ModelUpdate { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (IsEdit)
        {
            if (Id.HasValue)
            {
                var h = await HolidayService.GetHolidayAsync(Id.Value);
                if (h != null)
                {
                    ModelUpdate.HolidayID = h.HolidayID;
                    ModelUpdate.Date = h.Date;
                    ModelUpdate.DefaultShiftCodeID = h.DefaultShiftCodeID;
                }
            }
        }
        else
        {
            ModelCreate = new HolidayCreateDto();
        }
    }

    private async Task OnValidSubmit()
    {
        ApiResult result;
        if (!IsEdit)
        {
            result = await HolidayService.CreateHolidayAsync(ModelCreate);
        }
        else
        {
            result = await HolidayService.UpdateHolidayAsync(Id!.Value, ModelUpdate);
        }

        if (result.IsSuccess)
        {
            Navigation.NavigateTo("/holidays");
        }
        else
        {
            // TODO: Hiển thị lỗi nếu cần
        }
    }

    private void OnCancel()
    {
        Navigation.NavigateTo("/holidays");
    }
}