@page "/exports"
@using ShiftManagementFE.DTOs
@using ShiftManagementFE.Services
@inject ExportService ExportService
@inject IJSRuntime JS

<h3>Xuất dữ liệu chấm công</h3>

<div class="row">
    <div class="col-md-3">
        <label>Phòng ban (DepartmentID):</label>
        <InputNumber class="form-control" @bind-Value="DepartmentId" />
    </div>
    <div class="col-md-3">
        <label>Kỳ (Period, ví dụ: 2025-08):</label>
        <InputText class="form-control" @bind-Value="Period" />
    </div>
    <div class="col-md-3 mt-4">
        <button class="btn btn-primary" @onclick="LoadData">Lấy dữ liệu</button>
        <button class="btn btn-success ms-2" @onclick="ExportExcel" disabled="@(!HasData)">Xuất Excel</button>
        <button class="btn btn-danger ms-2" @onclick="ExportPdf" disabled="@(!HasData)">Xuất PDF</button>
    </div>
</div>

@if (data == null)
{
    <p class="mt-3">Chưa có dữ liệu.</p>
}
else if (!data.Any())
{
    <p class="mt-3">Không có dữ liệu cho phòng ban/kỳ này.</p>
}
else
{
    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>Mã NV</th>
                <th>Tên nhân viên</th>
                <th>Tổng số công</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var d in data)
            {
                <tr>
                    <td>@d.EmployeeID</td>
                    <td>@d.Name</td>
                    <td>@d.TotalWorkUnit</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    int DepartmentId { get; set; }
    string Period { get; set; } = ""; // định dạng "yyyy-MM"
    List<AttendanceExportDto>? data;

    bool HasData => data != null && data.Any();

    private async Task LoadData()
    {
        if (DepartmentId <= 0 || string.IsNullOrWhiteSpace(Period))
        {
            await JS.InvokeVoidAsync("alert", "Vui lòng nhập đầy đủ phòng ban và kỳ.");
            return;
        }
        data = await ExportService.GetAttendanceExportDataAsync(DepartmentId, Period);
    }

    private async Task ExportExcel()
    {
        if (!HasData) return;
        var fileBytes = await ExportService.ExportAttendanceToExcelAsync(data!);
        if (fileBytes != null)
        {
            await DownloadFile("attendance.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", fileBytes);
        }
    }

    private async Task ExportPdf()
    {
        if (!HasData) return;
        var fileBytes = await ExportService.ExportAttendanceToPdfAsync(data!);
        if (fileBytes != null)
        {
            await DownloadFile("attendance.pdf", "application/pdf", fileBytes);
        }
    }

    // JS thực hiện download file
    private async Task DownloadFile(string fileName, string contentType, byte[] fileData)
    {
        await JS.InvokeVoidAsync("blazorDownloadFile", fileName, contentType, Convert.ToBase64String(fileData));
    }
}